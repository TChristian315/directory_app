package tc.webapp;

import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

/**
 * Servlet implementation class EmployeeControllerServlet
 */
@WebServlet("/EmployeeControllerServlet")
public class EmployeeControllerServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	
	private DbUtil employeeDbUtil;
	
	@Resource(name="jdbc/directoryapp")
	private DataSource dataSource;
	
	@Override
	public void init() throws ServletException {
		super.init();
		
		// create our student db util, pass in conn pool / datasource
		try {
			employeeDbUtil = new DbUtil(dataSource);
		} catch (Exception e) {
			throw new ServletException(e);
		}
	}


	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		try {
			// read the "command" parameter
			String theCommand = request.getParameter("command");
			
			// if the command is missing, the default to listing students
			if(theCommand == null) {
				theCommand = "LIST";
			}
			
			// route to the appropriate method
			switch(theCommand) {
			case "LIST":
				listEmployees(request, response);
				break;
			case "LOAD":
				loadStudent(request, response);
				break;
				
			case "UPDATE":
				updateStudent(request, response);
				break;
			case "DELETE":
				deleteStudent(request,response);
				break;
			default:
				listEmployees(request, response);
			}
			
			// list the students in MVC fashion
			listEmployees(request, response);
		} catch (Exception e) {
			throw new ServletException(e);
		}
	}
	
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		
		try {
			String theCommand = request.getParameter("command");
			
			switch(theCommand) {
			case "ADD":
				addStudent(request, response);
				break;
			default:
				listEmployees(request, response);
			}
		} catch (Exception e) {
			throw new ServletException(e);
		}
	}


	private void deleteStudent(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		String theStudentId = request.getParameter("studentId");
		
		employeeDbUtil.deleteStudent(theStudentId);
		
		listEmployees(request, response);
		
	}


	private void updateStudent(HttpServletRequest request, HttpServletResponse response) throws Exception {

		// read student info from form data
		int id = Integer.parseInt(request.getParameter("studentId"));
		String firstName = request.getParameter("firstName");
		String lastName = request.getParameter("lastName");
		String email = request.getParameter("email");

		// create new student object
		Employee theStudent = new Employee(id, firstName, lastName, email);
		// perform update on dbs
		employeeDbUtil.updateStudent(theStudent);
		// send them back to the "list students" page
		listEmployees(request, response);
		
	}


	private void loadStudent(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		// read student idd from form data
		String theStudentId = request.getParameter("studentId");
		// get student from database (db util)
		Employee theStudent = employeeDbUtil.getStudent(theStudentId);
		// place student in the request attribute
		request.setAttribute("the_student", theStudent);
		// send to jsp page: update-student-form.jsp
		RequestDispatcher dispatcher =
				request.getRequestDispatcher("/update-student-form.jsp");
		dispatcher.forward(request, response);
		
	}


	private void addStudent(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		// read student info from form data
		
		String firstName = request.getParameter("firstName");
		String lastName = request.getParameter("lastName");
		String email = request.getParameter("email");
		
		// create a new student object
		Employee theStudent = new Employee(firstName, lastName, email);
		
		// add the student to the database
		employeeDbUtil.addStudent(theStudent);
		
		// send back to main page (the student list)
		response.sendRedirect(request.getContextPath() + "/EmployeeControllerServlet?command=LIST");
	}
	


	private void listEmployees(HttpServletRequest request, HttpServletResponse response) throws Exception {

		// get students from dbutil
		List<Employee> students = employeeDbUtil.getEmployees();
		
		// add students to the request 
		request.setAttribute("student_list", students);
		
		// send to jsp page (view)
		RequestDispatcher dispatcher = request.getRequestDispatcher("/list-students.jsp");
		dispatcher.forward(request, response);
	}
}
