package tc.webapp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

public class DbUtil{

	private DataSource dataSource;
	
	public DbUtil(DataSource theDataSource) {
		dataSource = theDataSource;
	}
	
	public List<Employee> getEmployees() throws Exception{
		
		List<Employee> employee = new ArrayList<>();
		
		Connection myConn = null;
		Statement myStmt = null;
		ResultSet myRs = null;
		
		try {
			
		myConn = dataSource.getConnection();
		String sql = "SELECT * FROM employees ORDER BY last_name";
		
		myStmt = myConn.createStatement();
		myRs=myStmt.executeQuery(sql);
		
			while(myRs.next()) {
				
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				String phoneNumber = myRs.getString("phone_number");
				String address = myRs.getString("address");
				String city = myRs.getString("city");
				String state = myRs.getString("state");
				String zipCode = myRs.getString("zip_code");
				
				
				Employee tempEmployee = new Employee(id, firstName, lastName, email, phoneNumber, address, city, state, zipCode);
				
				// add it to the list of students
				employee.add(tempEmployee);
			}
		return employee;
		
		}
		finally {
			// close JDBC objects
			close(myConn, myStmt, myRs);
		}		
	}

	private void close(Connection myConn, Statement myStmt, ResultSet myRs) {

		try {
			if(myRs!= null) {
				myRs.close();
			}
			if(myStmt != null) {
				myStmt.close();
			}
			if(myConn != null) {
				myConn.close();
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void addEmployee(Employee theEmployee) throws Exception{

		Connection myConn = null;
		PreparedStatement myStmt = null;
		
		try {

			myConn = dataSource.getConnection();

			String sql = "INSERT INTO employees "
					+"(first_name, last_name, email, phone_number, address, city, state, zip_code) "
					+"VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
			
			myStmt = myConn.prepareStatement(sql);
			myStmt.setString(1, theEmployee.getFirstName());
			myStmt.setString(2, theEmployee.getLastName());
			myStmt.setString(3, theEmployee.getEmail());
			myStmt.setString(4, theEmployee.getPhoneNumber());
			myStmt.setString(5, theEmployee.getAddress());
			myStmt.setString(6, theEmployee.getCity());
			myStmt.setString(7, theEmployee.getState());
			myStmt.setString(8, theEmployee.getZipCode());

			myStmt.execute();
		}
		finally {

			close(myConn, myStmt, null);
		}
	}


	public void updateEmployee(Employee theEmployee) throws Exception {

		Connection myConn = null;
		PreparedStatement myStmt = null;
		
		try {
			myConn = dataSource.getConnection();
			
			String sql = "UPDATE employees "
						+"set first_name=?, last_name=?, email=?, phone_number=?, address=?, city=?, state=?, zip_code=? "
						+"where id=?";
			
			myStmt = myConn.prepareStatement(sql);
			
			myStmt.setString(1, theEmployee.getFirstName());
			myStmt.setString(2, theEmployee.getLastName());
			myStmt.setString(3, theEmployee.getEmail());
			myStmt.setString(4, theEmployee.getPhoneNumber());
			myStmt.setString(5, theEmployee.getAddress());
			myStmt.setString(6, theEmployee.getCity());
			myStmt.setString(7, theEmployee.getState());
			myStmt.setString(8, theEmployee.getZipCode());
			myStmt.setInt(9, theEmployee.getId());
			
			myStmt.execute();
		}
		finally {
			close(myConn, myStmt, null);
		}
	}

	public void deleteEmployee(String theEmployeeId) throws Exception {
		Connection myConn = null;
		PreparedStatement myStmt = null;
		
		try {
			int id = Integer.parseInt(theEmployeeId);
			
			myConn = dataSource.getConnection();
			
			String sql = "DELETE FROM employees "
						+"where id=?";
			
			myStmt = myConn.prepareStatement(sql);
			
			myStmt.setInt(1, id);
			
			myStmt.execute();
		}
		finally {
			close(myConn, myStmt, null);
		}
		
	}
	
	public Employee getEmployee(String theEmployeeId) throws Exception {
		Employee theEmployee = null;
				
		Connection myConn = null;
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		int employeeId;
		
		try {

			employeeId = Integer.parseInt(theEmployeeId);
			
			myConn = dataSource.getConnection();
			
			String sql = "SELECT * FROM employees where id=?";
			
			myStmt = myConn.prepareStatement(sql);
			
			myStmt.setInt(1, employeeId);
			
			myRs = myStmt.executeQuery();
			
			if (myRs.next()) {
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				String phoneNumber = myRs.getString("phone_number");
				String address = myRs.getString("address");
				String city = myRs.getString("city");
				String state = myRs.getString("state");
				String zipCode = myRs.getString("zip_code");

				theEmployee = new Employee(employeeId, firstName, lastName, email, phoneNumber, address, city, state, zipCode);
				
			} else {
				throw new Exception("Could not find employee id: " + employeeId);
			}
			
			return theEmployee;
		} finally {
			close(myConn, myStmt, myRs);
		}
	}
	
	public List<Employee> searchStudents(String theSearchName)  throws Exception {
        List<Employee> employees = new ArrayList<>();
        
        Connection myConn = null;
        PreparedStatement myStmt = null;
        ResultSet myRs = null;
        int employeeId;
        
        try {
            
            // get connection to database
            myConn = dataSource.getConnection();
            
            //
            // only search by name if theSearchName is not empty
            //
            if (theSearchName != null && theSearchName.trim().length() > 0) {
                // create sql to search for students by name
                String sql = "SELECT * FROM employees WHERE lower(first_name) like ? OR lower(last_name) like ?";
                // create prepared statement
                myStmt = myConn.prepareStatement(sql);
                // set params
                String theSearchNameLike = "%" + theSearchName.toLowerCase() + "%";
                myStmt.setString(1, theSearchNameLike);
                myStmt.setString(2, theSearchNameLike);
                
            } else {
                // create sql to get all students
                String sql = "SELECT * FROM employees ORDER BY last_name";
                // create prepared statement
                myStmt = myConn.prepareStatement(sql);
            }
            
            // execute statement
            myRs = myStmt.executeQuery();
            
            // retrieve data from result set row
            while (myRs.next()) {
                
                // retrieve data from result set row
                int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				String phoneNumber = myRs.getString("phone_number");
				String address = myRs.getString("address");
				String city = myRs.getString("city");
				String state = myRs.getString("state");
				String zipCode = myRs.getString("zip_code");
                
                // create new student object
                Employee tempStudent = new Employee(id, firstName, lastName, email, phoneNumber, address, city, state, zipCode);
                
                // add it to the list of students
                employees.add(tempStudent);            
            }
            
            return employees;
        }
        finally {
            // clean up JDBC objects
            close(myConn, myStmt, myRs);
        }
    }
}
